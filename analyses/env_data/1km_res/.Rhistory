#load in 1km-res raster
all_vars_1km_res_raw<-stack("all_vars_1km_v2.tif")
library(raster)
#load in 1km-res raster
all_vars_1km_res_raw<-stack("all_vars_1km_v2.tif")
#load in metadata for sample subset
samp_metadata<-read.table("metadata_latlong_year_subsamp", header=TRUE, sep="\t")
samp_latlongs<-samp_metadata[,c(4:5)]
#divide bio3 and bio3 by 100
##the raw WorldClim values are multipled by 100
##this reverts them to their true values
all_vars_1km_res_raw$all_vars_1km_v2.3<-all_vars_1km_res_raw$all_vars_1km_v2.3/100
all_vars_1km_res_raw$all_vars_1km_v2.4<-all_vars_1km_res_raw$all_vars_1km_v2.4/100
#average devil density rasters for given time intervals
##earliest devil sample included is in 2006
##average 2001-2007 for 5 gen
##average 1996-2002 for 10 gen
##average 1991-1997 for 15 gen
##average 1986-1992 for 20 gen
all_vars_devil<-all_vars_1km_res_raw[[12:62]]
names(all_vars_devil)<-paste("devil", 1985:2035, sep="_")
names(all_vars_devil)
devil_5gen<-mean(all_vars_devil[[17:23]])
devil_10gen<-mean(all_vars_devil[[12:18]])
devil_15gen<-mean(all_vars_devil[[7:13]])
devil_20gen<-mean(all_vars_devil[[2:8]])
#re-stack variables with the averaged devil densities; omit years diseased
all_vars_trimmed<-stack(all_vars_1km_res_raw[[1:10]], devil_5gen, devil_10gen, devil_15gen, devil_20gen)
names(all_vars_trimmed)<-c("bio1", "bio2", "bio3", "bio4", "bio12", "bio15", "elev", "tasveg", "roads", "rivers", "devil_5gen", "devil_10gen", "devil_15gen", "devil_20gen")
#first turn every raster value for lat > max(sample lat) to NA
samp_lat_max <- max(samp_latlongs$Latitude)
lat_max_row <- rowFromY(devil_5gen, samp_lat_max)
lat_max_cell <- max(cellFromRow(devil_5gen, lat_max_row))
all_vars_trimmed_maxlat <- all_vars_trimmed
all_vars_trimmed_maxlat[1:lat_max_cell] <- NA
#next turn every raster value for long > max(sample long) + buffer to NA
samp_long_min<-min(samp_latlongs$Longitude)
samp_long_max<-max(samp_latlongs$Longitude)
samp_long_edge<-samp_long_max+((samp_long_max-samp_long_min)/5)
long_edge_col<-colFromX(devil_5gen, samp_long_edge)
all_vars_trimmed_maxlong<-all_vars_trimmed_maxlat
all_vars_trimmed_maxlong[,long_edge_col:631]<-NA
#next turn every raster value for lat < min(sample lat) + buffer to NA
samp_lat_min<-min(samp_latlongs$Latitude)
samp_lat_edge<-samp_lat_min-((samp_lat_max-samp_lat_min)/5)
lat_edge_row<-rowFromY(devil_5gen, samp_lat_edge)
all_vars_trimmed_minlat<-all_vars_trimmed_maxlong
all_vars_trimmed_minlat[lat_edge_row:554,]<-NA
#crop extent of raster to remove unnecessary NAs
all_vars_trimmed_cropped<-trim(all_vars_trimmed_minlat)
spplot(all_vars_trimmed_cropped)
library(geobuffer)
library(geodist)
#extract environmental data at sample latlongs
env_mean<-raster::extract(x=all_vars_trimmed_cropped, y=samp_latlongs, fun="mean", na.rm=TRUE, df=TRUE, layer=1, nl=14, sp=FALSE)
#identify samples that are not on raster cells due to raster resolution
na_index<-which(is.na(env_mean[,2]))
na_latlongs<-samp_latlongs[na_index,]
#convert one of the raster layers to a df
r_df<-raster::as.data.frame(x=all_vars_trimmed_cropped, xy=TRUE, na.rm=TRUE)
#calculate distance between each of the NA sample coordinates and coordinates that do have raster values
na_dist<-geodist::geodist(x=na_latlongs, y=r_df[,1:2], measure="geodesic")
View(na_dist)
#replace NA sample coordinates with coordinates of nearest raster cell with environmental values
##very minorly changes the location of 8 samples
na_dist_min_index<-c()
for (i in 1:nrow(na_latlongs)){
na_dist_vec<-as.vector(na_dist[i,])
na_dist_min_index[i]<-which(na_dist_vec==min(na_dist_vec))
}
View(na_dist)
head(na_dist)
nrow(na_dist)
min(na_dist[1,])
min(na_dist[1,])
for (i in 1:nrow(na_dist)){
min(na_dist[i,])
}
print(min(na_dist[i,]))
for (i in 1:nrow(na_dist)){
print(min(na_dist[i,]))
}
?geodist()
#load environmental data
env<-stack("rasters_for_rga.tif")
#load environmental data
env<-stack("rasters_for_rga.tif")
#code environmental layers with convenient names for later scripting
##using non-stereotypic filenames might become unwieldly for parallel processing
names(env)<-paste("e", seq(1:14), sep="")
names(env)
for (i in 1:dim(env)[3]){
env_temp<-env[[i]]
env_na<-env_temp
env_na[which(is.na(env_na[])==TRUE)]<- -1
writeRaster(env_na, paste(names(env)[i], "_na", sep=""), format="ascii")
}
?commandArgs
